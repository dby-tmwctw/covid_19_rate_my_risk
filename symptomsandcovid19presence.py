# -*- coding: utf-8 -*-
"""symptomsAndCovid19Presence.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PWjI8PFGhudAOhOmR5RNUnvVWQIjZ4nK
"""

import pandas as pd
covid_data = pd.read_csv('/content/symptoms.csv')

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
covid_data = covid_data.apply(LabelEncoder().fit_transform)
covid_data.head(10)

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

X = covid_data.loc[:, (covid_data.columns != 'COVID-19')]
y = covid_data.loc[:, covid_data.columns == 'COVID-19']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=0)

logisticRegr = LogisticRegression()
logisticRegr.fit(X_train, y_train)
predictions = logisticRegr.predict(X_test)
predproba = logisticRegr.predict_proba(X_test)
score = logisticRegr.score(X_test, y_test)
print('Accuracy of logistic regression classifier on test set: {:.4f}'.format(score))
from sklearn.metrics import classification_report
print(classification_report(y_test, predictions))
print(predproba)
import pickle

pickle.dump(logisticRegr, open("/content/symptomsLogReg.pkl", "wb"))

logisticRegr = pickle.load(open("/content/symptomsLogReg.pkl", "rb"))
score = logisticRegr.score(X_test, y_test)
print(score)

from sklearn import svm
import numpy as np
X = covid_data.loc[:, (covid_data.columns != 'COVID-19')]
y = covid_data.loc[:, covid_data.columns == 'COVID-19']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=0)

svm_model = svm.SVC()
svm_model.fit(X_train, np.ravel(y_train))
predictions = svm_model.predict(X_test)
score = svm_model.score(X_test, y_test)
print('Accuracy of svm classifier on test set: {:.4f}'.format(score))
from sklearn.metrics import classification_report
print(classification_report(y_test, predictions))
X_test.head(10)

def symptoms_risk(x):
  symptomsLogisticRegr = pickle.load(open("model/symptomsLogReg.pkl", "rb"))
  return symptomsLogisticRegr.predict_proba([x])[0][1]
symptoms_risk(X_test.loc[5145,:])
